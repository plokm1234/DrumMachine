{"version":3,"sources":["components/DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","handleKeyDown","e","keyCode","props","letter","charCodeAt","audio","play","currentTime","handleDisplay","id","handleClick","document","addEventListener","this","removeEventListener","className","onClick","ref","src","sound","Component","data","App","display","setState","state","map","d","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAwCeA,G,uNA7BbC,cAAgB,SAAAC,GACVA,EAAEC,UAAY,EAAKC,MAAMC,OAAOC,eAClC,EAAKC,MAAMC,OACX,EAAKD,MAAME,YAAc,EACzB,EAAKL,MAAMM,cAAc,EAAKN,MAAMO,M,EAIxCC,YAAc,WACZ,EAAKL,MAAMC,OACX,EAAKD,MAAME,YAAc,EACzB,EAAKL,MAAMM,cAAc,EAAKN,MAAMO,K,mFAlBpCE,SAASC,iBAAiB,UAAWC,KAAKd,iB,6CAI1CY,SAASG,oBAAoB,UAAWD,KAAKd,iB,+BAiBrC,IAAD,OACP,OACE,yBAAKgB,UAAU,WAAWN,GAAII,KAAKX,MAAMO,GAAIO,QAASH,KAAKH,aACzD,4BAAKG,KAAKX,MAAMC,QAChB,2BACEc,IAAK,SAAAA,GAAG,OAAK,EAAKZ,MAAQY,GAC1BF,UAAU,OACVG,IAAKL,KAAKX,MAAMiB,MAChBV,GAAII,KAAKX,MAAMC,c,GA/BHiB,cCChBC,EAAO,CACX,CACEZ,GAAI,WACJN,OAAQ,IACRe,IAAK,4DAEP,CACET,GAAI,WACJN,OAAQ,IACRe,IAAK,4DAEP,CACET,GAAI,WACJN,OAAQ,IACRe,IAAK,4DAEP,CACET,GAAI,WACJN,OAAQ,IACRe,IAAK,8DAEP,CACET,GAAI,OACJN,OAAQ,IACRe,IAAK,4DAEP,CACET,GAAI,UACJN,OAAQ,IACRe,IAAK,0DAEP,CACET,GAAI,aACJN,OAAQ,IACRe,IAAK,8DAEP,CACET,GAAI,OACJN,OAAQ,IACRe,IAAK,8DAEP,CACET,GAAI,YACJN,OAAQ,IACRe,IAAK,2DAiCMI,E,YA7Bb,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KAMRM,cAAgB,SAAAe,GAAO,OAAI,EAAKC,SAAS,CAAED,aALzC,EAAKE,MAAQ,CACXF,QAAS,wDAHM,E,sEAST,IAAD,OACP,OACE,yBAAKd,GAAG,gBACN,4CACA,yBAAKA,GAAG,WAAWI,KAAKY,MAAMF,SAC9B,yBAAKd,GAAG,aACLY,EAAKK,KAAI,SAAAC,GAAC,OACT,kBAAC,EAAD,CACElB,GAAIkB,EAAElB,GACNN,OAAQwB,EAAExB,OACVgB,MAAOQ,EAAET,IACTV,cAAe,EAAKA,yB,GArBhBY,aCtCEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASwB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5d5c1d35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./DrumPad.css\";\r\nclass DrumPad extends Component {\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n\r\n  handleKeyDown = e => {\r\n    if (e.keyCode === this.props.letter.charCodeAt()) {\r\n      this.audio.play();\r\n      this.audio.currentTime = 0;\r\n      this.props.handleDisplay(this.props.id);\r\n    }\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.audio.play();\r\n    this.audio.currentTime = 0;\r\n    this.props.handleDisplay(this.props.id);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"drum-pad\" id={this.props.id} onClick={this.handleClick}>\r\n        <h1>{this.props.letter}</h1>\r\n        <audio\r\n          ref={ref => (this.audio = ref)}\r\n          className=\"clip\"\r\n          src={this.props.sound}\r\n          id={this.props.letter}\r\n        ></audio>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport DrumPad from \"./components/DrumPad\";\nconst data = [\n  {\n    id: \"Heater-1\",\n    letter: \"Q\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n  },\n  {\n    id: \"Heater-2\",\n    letter: \"W\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n  },\n  {\n    id: \"Heater-3\",\n    letter: \"E\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n  },\n  {\n    id: \"Heater-4\",\n    letter: \"A\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n  },\n  {\n    id: \"Clap\",\n    letter: \"S\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n  },\n  {\n    id: \"Open-HH\",\n    letter: \"D\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n  },\n  {\n    id: \"Kick-n-Hat\",\n    letter: \"Z\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n  },\n  {\n    id: \"Kick\",\n    letter: \"X\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n  },\n  {\n    id: \"Closed-HH\",\n    letter: \"C\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n  }\n];\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: \"Click or Press the Key to show the name of the sound\"\n    };\n  }\n\n  handleDisplay = display => this.setState({ display });\n\n  render() {\n    return (\n      <div id=\"drum-machine\">\n        <h1>Drum Machine</h1>\n        <div id=\"display\">{this.state.display}</div>\n        <div id=\"drum-pads\">\n          {data.map(d => (\n            <DrumPad\n              id={d.id}\n              letter={d.letter}\n              sound={d.src}\n              handleDisplay={this.handleDisplay}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}